// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Assesses risk and verifies identity during KYC process.
 *
 * - assessKYCRisk - A function that handles the KYC risk assessment process.
 * - AssessKYCRiskInput - The input type for the assessKYCRisk function.
 * - AssessKYCRiskOutput - The return type for the assessKYCRisk function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AssessKYCRiskInputSchema = z.object({
  fullName: z.string().describe('The full name of the user.'),
  dateOfBirth: z.string().describe('The date of birth of the user (YYYY-MM-DD).'),
  address: z.string().describe('The current address of the user.'),
  governmentId: z.string().describe('The government-issued ID number of the user.'),
  photoDataUri: z
    .string()
    .describe(
      "A photo of a government-issued ID, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type AssessKYCRiskInput = z.infer<typeof AssessKYCRiskInputSchema>;

const AssessKYCRiskOutputSchema = z.object({
  riskAssessment: z.object({
    riskLevel: z
      .string()
      .describe('The overall risk level associated with the user (low, medium, high).'),
    fraudScore: z
      .number()
      .describe('A numerical score indicating the likelihood of fraudulent activity (0-100).'),
    identityVerified: z.boolean().describe('Whether the user identity could be verified.'),
    flags: z.array(z.string()).describe('Reasons why the user could be a risk.'),
  }),
});
export type AssessKYCRiskOutput = z.infer<typeof AssessKYCRiskOutputSchema>;

export async function assessKYCRisk(input: AssessKYCRiskInput): Promise<AssessKYCRiskOutput> {
  return assessKYCRiskFlow(input);
}

const prompt = ai.definePrompt({
  name: 'assessKYCRiskPrompt',
  input: {schema: AssessKYCRiskInputSchema},
  output: {schema: AssessKYCRiskOutputSchema},
  prompt: `You are an expert in Know Your Customer (KYC) and fraud detection. Assess the risk associated with a user based on the following information:

Full Name: {{{fullName}}}
Date of Birth: {{{dateOfBirth}}}
Address: {{{address}}}
Government ID: {{{governmentId}}}
Government ID Photo: {{media url=photoDataUri}}

Determine the riskLevel (low, medium, or high), provide a fraudScore (0-100), and indicate if the identity could be verified. Provide specific reasons for the risk assessment in the flags array.

Output in JSON format:
{{output}}`,
});

const assessKYCRiskFlow = ai.defineFlow(
  {
    name: 'assessKYCRiskFlow',
    inputSchema: AssessKYCRiskInputSchema,
    outputSchema: AssessKYCRiskOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
